import { ToMongo } from "@/@types/ToMongo";
import { zodResolver } from "@hookform/resolvers/zod";
import axios from "axios";
import Head from "next/head";
import { useRouter } from "next/router";
import { CreateCompletionResponse } from "openai";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";

const EssayOutlineFormSchema = z.object({
  name: z.string().min(1, "* Type your name").max(100),
  topic: z.string().min(1, "* Write about the topic that you would like to learn").max(250, "* Max length is 250 characters").startsWith("Create an outline for an essay"),
})

type FormData = z.input<typeof EssayOutlineFormSchema>;

export default function EssayOutline() {
  const { register, handleSubmit, formState: { isSubmitting, errors } } = useForm({
    resolver: zodResolver(EssayOutlineFormSchema),
  })

  const [response, SetResponse] = useState<ToMongo | null>(null);
  const [isSendingtoCommunity, SetIsSendingtoCommunity] = useState(false);

  const router = useRouter()
  async function handleSendtoCommunity(data: any) {
    try {
      SetIsSendingtoCommunity(true);

      await axios.post("/api/post-data", {
        name: response?.name,
        topic: response?.topic,
        category: "Essay Outline",
        response: response?.data,
      })
      router.push('/')

    }
    catch (error) {
      console.log(error);
    }
  }

  async function handleOnSubmitForm(data: any) {
    const { topic, name } = data as FormData;
    try {

      const response = await axios.post("/api/essay-outline", {
        prompt: topic,
      });
      console.log(response);
      const data: CreateCompletionResponse = response.data;
      if (data.choices[0].text) {
        SetResponse({
          topic: topic,
          name: name,
          data: data.choices[0].text
        });
      } else {
        SetResponse({
          topic: topic,
          name: name,
          data: "Sorry, we couldn't generate your study notes. Please try again."
        })
      }

    } catch (error) {
      console.log(error);

      SetResponse({
        topic: topic,
        name: name,
        data: "Sorry, we couldn't generate your study notes. Please try again."
      })

    }

  }
  return (
    <>
      <Head>
        <title>Essay Outline</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='max-w-7xl mx-auto p-20 text-center'>
        <h1 className='text-5xl text-gray-800 font-bold '>Essay Outline</h1>
        <h3 className="text-2xl mt-5 text-gray-600">Do you know how to start to write your essay? Get an outline</h3>
        <section className="mt-9 
        bg-gray-800 shadow-lg rounded-2xl  py-9 mb-4  w-3/4 ml-auto mr-auto ">

          <form className="px-32" onSubmit={handleSubmit(handleOnSubmitForm)}>

            <div className="mb-4 mt-4">
              <label className="block text-left text-gray-100  text-lg ml-2 mb-4" htmlFor="username">
                Your name
              </label>
              <input className="block  text-sm shadow appearance-none border rounded w-2/5 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="username" type="text" placeholder="John" {...register("name")} />
              {errors.name && <p className="text-red-500 text-sm text-left mt-3">{errors!.name!.message + ""}</p>}
            </div>
            <div className="mb-4 mt-8">
              <label className="block text-left text-gray-100 text-lg ml-2 mb-4" htmlFor="prompt">
                Write about the topic you want to write the essay about
              </label>
              <ul className="text-left mb-4">
                <li> - Create an outline for an essay about Nikola Tesla and his contributions to technology</li>
              </ul>
              <input className="shadow text-sm appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="prompt" type="text"  {...register("topic")} />
              {errors.topic?.message && <p className="text-red-500 text-sm text-left mt-3"> {errors!.topic?.message + ""}</p>}

            </div>
            <button disabled={isSubmitting} className="disabled:bg-[#9c9dc5] bg-[#6469ff] hover:bg-[#494dc0] text-gray-100 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline mt-8" type="submit">
              {isSubmitting ? "Loading ..." : "Generate"}
            </button>
          </form>
          {response?.data && (
            <>
              <div className="bg-gray-900 py-3 px-4 mt-8 rounded-2xl w-4/5 mx-auto">

                <p className="text-left text-gray-100 text-lg whitespace-pre-wrap">{response.data}</p>
                <button disabled={isSendingtoCommunity} onClick={handleSendtoCommunity} className="disabled:bg-[#9c9dc5] bg-[#6469ff] hover:bg-[#494dc0] text-gray-100 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline mt-8">
                  {isSendingtoCommunity ? "Sending ..." : "Send the results to the Community"}
                </button>
              </div>
            </>
          )}
        </section>

      </main>
    </>
  )
}